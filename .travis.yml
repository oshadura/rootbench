sudo: true

# Specifying none will let us define CXX and CC in the way we want.
# See more: https://github.com/travis-ci/travis-ci/issues/6083
language: none

addons: &addons
  apt:
    packages: &common_deps
      - cmake
      - libtbb-dev
    sources: &sources
      - ubuntu-toolchain-r-test
      - llvm-toolchain-trusty-4.0
      - llvm-toolchain-trusty-5.0

cache:
  apt: true
#  ccache: true
#  directories:
#    - $BUILD_DEPS


# Do not build our sync branch.
branches:
  only:
    - master
    - "*Travis*"

matrix:
  include:
    # There seems to be a hard limit to how many machines a Travis build will
    # across all platforms. By interleaving OS X, the hope is to get in the
    # queue faster while not blocking Linux builds from occuring.

    # Coverage
    - env: CXX=g++ CC=gcc BUILD_TYPE=Debug EXTRA_OPTS="-Dcoverage=ON"
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'lcov']

    # GCC 5
    - env: CXX=g++-5 CC=gcc BUILD_TYPE=Debug
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'g++-5', 'g++-5-multilib', 'libc6-dbg']
    - env: CXX=g++-5 CC=gcc BUILD_TYPE=Release
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'g++-5', 'g++-5-multilib', 'libc6-dbg']

    # GCC 6
    - env: CXX=g++-6 CC=gcc BUILD_TYPE=Debug
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'g++-6', 'g++-6-multilib', 'libc6-dbg']
    - env: CXX=g++-6 CC=gcc BUILD_TYPE=Release
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'g++-6', 'g++-6-multilib', 'libc6-dbg']

    # Clang 4
    - env: CXX=clang++-4.0 CC=clang-4.0 BUILD_TYPE=Debug
      compiler: clang
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'clang-4.0', 'g++-multilib', 'libc6-dbg']
    - env: CXX=clang++-4.0 CC=clang-4.0 BUILD_TYPE=Release
      compiler: gcc
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'clang-4.0', 'g++-multilib', 'libc6-dbg']

    # Clang 5
    - env: CXX=clang++-5.0 CC=clang-5.0 BUILD_TYPE=Debug
      compiler: clang
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'clang-5.0', 'g++-multilib', 'libc6-dbg']
    - env: CXX=clang++-5.0 CC=clang-5.0 BUILD_TYPE=Release
      compiler: clang
      addons:
        apt:
          sources: *sources
          packages: [*common_deps, 'clang-5.0', 'g++-multilib', 'libc6-dbg']

before_install:
  - wget https://ecsft.cern.ch/dist/cvmfs/cvmfs-release/cvmfs-release-latest_all.deb
  - sudo dpkg -i cvmfs-release-latest_all.deb
  - sudo apt-get update
  - sudo apt-get install cvmfs cvmfs-config-default
  - rm -f cvmfs-release-latest_all.deb
  - sudo mkdir -p /etc/cvmfs/
  - echo "CVMFS_REPOSITORIES=sft.cern.ch,projects.cern.ch" > default.local
  - echo "CVMFS_HTTP_PROXY=DIRECT" >> default.local
  - sudo mv default.local /etc/cvmfs/
  - sudo /etc/init.d/autofs stop
  - sudo cvmfs_config setup
  - sudo mkdir -p /cvmfs/sft-nightlies.cern.ch
  - sudo mount -t cvmfs sft-nightlies.cern.ch /cvmfs/sft-nightlies.cern.ch
  - ls /cvmfs/sft-nightlies.cern.ch
  # Install coveralls
  - sudo gem install coveralls-lcov
  # Install GSL 2.0
  # FIXME: We should have it somewhere in cvmfs.
  - sudo add-apt-repository -y ppa:tsvetko.tsvetkov/trusty-backports && sudo apt-get update
  - sudo apt-get install libgsl2

install:
  - |
    pwd
    HOME_FOLDER=$(pwd)/../
    if [ "${EXTRA_OPTS}" == "-Dcoverage=ON" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
       #export GCOV_PREFIX="$HOME_FOLDER/ROOT-gcov/"
       #mkdir -p $GCOV_PREFIX
       #export GCOV_PREFIX_STRIP=16
       PATH=~/.local/bin:${PATH};
       pip install --user --upgrade pip;
       pip install --user cpp-coveralls;
    fi

script:
- echo "Exporting latest ROOT binaries."
- |
  # Go one level up from REPO_SLUG/rootbench
  cd $HOME_FOLDER
  d=$(date +%a)
  for i in `seq 1 7`; do
    ROOT_LOCATION=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/rootcov/$d/ROOT/
    ROOT_THISROOT=$ROOT_LOCATION/HEAD-*/x86_64-ubuntu1404-gcc48-opt/bin/thisroot.sh
    if ls $ROOT_THISROOT ; then
       break;
    fi
    d=$(date +%a -d "$d - 1 day")
  done;
-  echo "Downloading Latest ROOT .gcno binaries."
- |
  pwd
  HOME_FOLDER=$(pwd)/../
  cd $HOME_FOLDER
  mkdir rootgcno
  d=$(date +%a)
  for i in `seq 1 7`; do
    ROOTGCNO_TAR=http://lcgpackages.web.cern.ch/lcgpackages/tarFiles/nightlies/rootcov/$d/rootgcno.tgz
    if curl -s -f --head $ROOTGCNO_TAR ; then
       break;
    fi
    d=$(date +%a -d "$d - 1 day")
  done;
- |
  cd root
  echo "Initializing ROOT $ROOT_THISROOT"
  source $ROOT_THISROOT
  which root
  cd $HOME_FOLDER
- |
  if [ "${EXTRA_OPTS}" == "-Dcoverage=ON" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
    mkdir $HOME_FOLDER/lcov && cd $HOME_FOLDER/lcov
    wget https://github.com/linux-test-project/lcov/archive/v1.13.zip
    unzip v1.13.zip
    LCOV="`pwd`/lcov-1.13/bin/lcov --gcov-tool gcov"
    mkdir -p $HOME_FOLDER/coveralls
  fi
- mkdir $HOME_FOLDER/build
- cd $HOME_FOLDER/build
#- export GCOV_PREFIX=`pwd`
#- export GCOV_PREFIX_STRIP=0
- cmake -DCMAKE_C_COMPILER=${CC} -DCMAKE_CXX_COMPILER=${CXX} \
        -DCMAKE_BUILD_TYPE=${BUILD_TYPE} -DCMAKE_CXX_FLAGS="${EXTRA_FLAGS}" \
        ${EXTRA_OPTS} ../rootbench
- cmake --build .
- |
  if [ "${EXTRA_OPTS}" == "-Dcoverage=ON" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
      find $HOME_FOLDER/build -name "*.gcno" -exec cp "{}" $HOME_FOLDER/coveralls/ \;
      cp $HOME_FOLDER/gcno/* $HOME_FOLDER/coveralls/
      $LCOV --zerocounters --directory $HOME_FOLDER/coveralls
      $LCOV -c -i -d $HOME_FOLDER/coveralls --base-directory `pwd` --output-file $HOME_FOLDER/build/coverage.init
  fi
- ctest -L short || true
- |
  if [ "${EXTRA_OPTS}" == "-Dcoverage=ON" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
      find $HOME_FOLDER/build -name "*.gcda" -exec cp "{}" $HOME_FOLDER/coveralls/ \;
      ls -la $HOME_FOLDER/coveralls
      $LCOV -c -d $HOME_FOLDER/coveralls --base-directory `pwd` --output-file $HOME_FOLDER/build/coverage.info
  fi

after_success:

- |
  if [ "${EXTRA_OPTS}" == "-Dcoverage=ON" -a "${TRAVIS_OS_NAME}" == "linux" ]; then
      touch $HOME_FOLDER/build/coverage.total
      $LCOV -a $HOME_FOLDER/build/coverage.init -a $HOME_FOLDER/build/coverage.info -o $HOME_FOLDER/build/coverage.total
      $LCOV -r $HOME_FOLDER/build/coverage.total "/usr*" "`pwd`/googlebenchmark-prefix*" -o $HOME_FOLDER/build/coverage.total 
      $LCOV -l $HOME_FOLDER/build/coverage.total
      coveralls-lcov $HOME_FOLDER/build/coverage.total
  fi

on_failure:
  -|
   echo "Showing current directory contents"
   ls -la
